select:
  - platform: template
    name: "PROGRAMMSCHALTER_SET"
    id: PROGRAMMSCHALTER_SET
    options:
     - "Notbetrieb"
     - "Bereitschaft"
     - "Automatik"
     - "Tagbetrieb"
     - "Absenkbetrieb"
     - "Warmwasser"
     - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            // Prüfe ob Dropdown nicht auf Unbekannt steht
            const char* auswahl = id(PROGRAMMSCHALTER_SET).state.c_str();
            if(strcmp(auswahl, "Unbekannt") != 0) {
             // writeSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"), auswahl);
              readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
            }
            return;

text_sensor:
  - platform: homeassistant
    name: "EINSTELL_SPEICHERSOLLTEMP_SET"
    id: EINSTELL_SPEICHERSOLLTEMP_SET
    entity_id: input_number.speichersolltemp_set
    on_value:
      then:
        lambda: |-
          if(atoi(x.c_str()) != 20) {
            char temp[3];
            strncpy(temp, x.c_str(), sizeof(temp)-1);
            temp[2] ='\0';
            const char* ctemp = temp;
            writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP"), ctemp);
            id(EINSTELL_SPEICHERSOLLTEMP).update();
            id(SPEICHERISTTEMP).update();
            id(SPEICHERSOLLTEMP).update();

          }
          return;

  - platform: homeassistant
    name: "EINSTELL_SPEICHERSOLLTEMP2_SET"
    id: EINSTELL_SPEICHERSOLLTEMP2_SET
    entity_id: input_number.speichersolltemp2_set
    on_value:
      then:
        lambda: |-
          if(atoi(x.c_str()) != 20) {
            char temp[3];
            strncpy(temp, x.c_str(), sizeof(temp)-1);
            temp[2] ='\0';
            const char* ctemp = temp;
            writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP2"), ctemp);
            id(EINSTELL_SPEICHERSOLLTEMP2).update();
            id(SPEICHERISTTEMP).update();
            id(SPEICHERSOLLTEMP).update();
          }
          return;


#########################################
#                                       #
#   MANAGER TEXT SENSORS                #
#                                       #
#########################################
  - platform: template
    name: "GERAETE_KENNUNG"
    id: GERAETE_KENNUNG
    icon: "mdi:description"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("GERAETE_KENNUNG"));
      return {};

  - platform: template
    name: "PROGRAMMSCHALTER"
    id: PROGRAMMSCHALTER
    icon: "mdi:switch"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
      return {};


button:

  - platform: template
    name: "Update Uhrzeit"
    id: update_uhrzeit
    on_press:
      then:      
        lambda: |-
          ESP_LOGI("WRITE UHRZEIT VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());

          char stunde[3];
          char minute[3];
          char sekunde[3];

          strncpy(stunde, id(warmepumpe_uhrzeit).state.c_str(), sizeof(stunde)-1);
          stunde[2] ='\0';
          strncpy(minute, id(warmepumpe_uhrzeit).state.c_str()+3, sizeof(minute)-1);
          minute[2] ='\0';
          strncpy(sekunde, id(warmepumpe_uhrzeit).state.c_str()+6, sizeof(sekunde)-1);
          sekunde[2] ='\0';
          const char* cstunde = stunde;
          const char* cminute = minute;
          const char* csekunde = sekunde;
          ESP_LOGI("WRITE", "Stunde: %s, Minute: %s, Sekunde: %s", cstunde, cminute, csekunde);
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"), cstunde);
          id(STUNDE).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"), cminute);
          id(MINUTE).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"), csekunde);
          id(SEKUNDE).update();

  - platform: template
    name: "Update Datum"
    id: update_datum
    on_press:
      then:      
        lambda: |-
          ESP_LOGI("WRITE DATUM VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());
          char year[3];
          char month[3];
          char day[3];

          strncpy(year, id(warmepumpe_datum).state.c_str()+2, sizeof(year)-1);
          year[2] ='\0';
          strncpy(month, id(warmepumpe_datum).state.c_str()+5, sizeof(month)-1);
          month[2] ='\0';
          strncpy(day, id(warmepumpe_datum).state.c_str()+8, sizeof(day)-1);
          day[2] ='\0';

          const char* cyear = year;
          const char* cmonth = month;
          const char* cday = day;
          ESP_LOGI("WRITE", "Year: %s, Month: %s, Day: %s", cyear, cmonth, cday);
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"), cyear);
          id(JAHR).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"), cmonth);
          id(MONAT).update();
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"), cday);
          id(TAG).update();


sensor:
  - platform: template
    name: "INDEX_NOT_FOUND_MANAGER"
    id: INDEX_NOT_FOUND_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0

  - platform: template
    name: "LUEFT_PASSIVKUEHLUNG"
    id: LUEFT_PASSIVKUEHLUNG
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LUEFT_PASSIVKUEHLUNG"));
      return {};

  - platform: template
    name: "LAUFZEIT_VERDICHTER_HEIZEN"
    id: LAUFZEIT_VERDICHTER_HEIZEN
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LAUFZEIT_VERDICHTER_HEIZEN"));
      return {};
     
  - platform: template
    name: "LAUFZEIT_VERDICHTER_KUEHLEN"
    id: LAUFZEIT_VERDICHTER_KUEHLEN
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 3
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LAUFZEIT_VERDICHTER_KUEHLEN"));
      return {};
     
  - platform: template
    name: "LAUFZEIT_VERDICHTER_WW"
    id: LAUFZEIT_VERDICHTER_WW
    icon: "mdi:timer"
    device_class: "duration"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("LAUFZEIT_VERDICHTER_WW"));
      return {};

  - platform: template
    name: "RAUMTEMP_ERFASSUNG"
    id: RAUMTEMP_ERFASSUNG
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMTEMP_ERFASSUNG"));
      return {};

  - platform: template
    name: "PARAMETERSATZ_MANAGER"
    id: PARAMETERSATZ_MANAGER
    icon: "mdi:description"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("PARAMETERSATZ"));
      return {};
     
  - platform: template
    name: "SOFTWARE_VERSION"
    id: SOFTWARE_VERSION
    icon: "mdi:wysiwyg"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("SOFTWARE_VERSION"));
      return {};
    
  - platform: template
    name: "TEMPORALE_LUEFTUNGSSTUFE_STUFE"
    id: TEMPORALE_LUEFTUNGSSTUFE_STUFE
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("TEMPORALE_LUEFTUNGSSTUFE_STUFE"));
      return {};
     
  - platform: template
    name: "VERDICHTER_MANAGER"
    id: VERDICHTER_MANAGER
    icon: "mdi:compress"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("VERDICHTER"));
      return {};
     
  - platform: template
    name: "SOMMERBETRIEB_LUEFTUNG"
    id: SOMMERBETRIEB_LUEFTUNG
    icon: "mdi:weather-sunny"
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("SOMMERBETRIEB_LUEFTUNG"));
      return {};
     
  - platform: template
    name: "ZWISCHENEINSPRITZUNG_ISTTEMP"
    id: ZWISCHENEINSPRITZUNG_ISTTEMP
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("ZWISCHENEINSPRITZUNG_ISTTEMP_VND"));
      return {};
     
  - platform: template
    name: "JAHR"
    id: JAHR
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"));
      return {};

  - platform: template
    name: "MINUTE"
    id: MINUTE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"));
      return {};

  - platform: template
    name: "MONAT"
    id: MONAT
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"));
      return {};

  - platform: template
    name: "SEKUNDE"
    id: SEKUNDE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"));
      return {};

  - platform: template
    name: "STUNDE"
    id: STUNDE
    icon: "mdi:schedule"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"));
      return {};

  - platform: template
    name: "TAG"
    id: TAG
    icon: "mdi:calendar_month"
    accuracy_decimals: 0
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"));
      return {};

  - platform: template
    name: "BETRIEBS_STATUS"
    id: BETRIEBS_STATUS
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_manager], GetElsterIndex("BETRIEBS_STATUS"));
      return {};

  - platform: template
    name: "EVU_SPERRE"
    id: EVU_SPERRE
    icon: "mdi:dip-switch"
    accuracy_decimals: 0
    update_interval: 1min
    lambda: |-
      readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EVU"));
      return {};
